//  https://leetcode-cn.com/problems/russian-doll-envelopes/submissions/ 先上传一个炒饭版本。。

int maxEnvelopes(int** envelopes, int envelopesSize, int* envelopesColSize){
    int env = 0;

    if(envelopesSize <= 1){
        return envelopesSize;
    }

    //  二维数组初始化-格式
    int tmp[0][0] = {{0,0}};

    //  把数字重复的元素统统干掉
    //int** newenv = (int**)calloc(envelopesSize, sizeof(int*));
    for(int i = 0; i < envelopesSize; i++){
        //printf("%i\n", envelopes[i][0]);
        for(int j = 0; j < envelopesSize && (j != i); j++){
            if(envelopes[i][0] == envelopes[j][0]){
                //printf("%i\n", envelopes[i][0]);
                if(envelopes[i][1] >= envelopes[j][1]){
                    envelopes[j][0] = 0;
                    envelopes[j][1] = 0;
                    //printf("已执行\n");
                }else{
                    envelopes[i][0] = 0;
                    envelopes[i][1] = 0;
                }
            }
        }
    }
    for(int i = 0; i < envelopesSize; i++){
        //printf("%i\n", envelopes[i][0]);
        for(int j = 0; j < envelopesSize && (j != i); j++){
            if(envelopes[i][1] == envelopes[j][1]){
                //printf("%i\n", envelopes[i][0]);
                if(envelopes[i][0] >= envelopes[j][0]){
                    envelopes[j][0] = 0;
                    envelopes[j][1] = 0;
                    //printf("已执行\n");
                }else{
                    envelopes[i][0] = 0;
                    envelopes[i][1] = 0;
                }
            }
        }
    }

    //printf("%i\n", envelopesSize);
    //  计算env
    for(int i = 0; i < envelopesSize; i++){
        if(envelopes[i][0] != 0){
            env++;
        }
    }

    return env;
}
