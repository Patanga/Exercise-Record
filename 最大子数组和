//  https://leetcode-cn.com/problems/maximum-subarray
//  遇到巨大炒饭的时候会超出时间限制，还是要学习动态规划

int maxSubArray(int* nums, int numsSize){
    int max = 0, sum = 0;
    bool minus = false;

    for(int i = 0; i < numsSize; i++){
        if(nums[i] > max){
            max = nums[i];
        }
    }

    for(int i = 0; i < numsSize; i++){
        // i = 2, nums[i] = 5
        for(int j = 0; j < numsSize-i; j++){
            // numsSize-i = 5-2 = 3
            sum = nums[i];
            max = fmax(max, sum);
            //if(i != j){
                //sum = nums[i];
                for(int m = 1; m <= j; m++){
                    sum += nums[i+m];
                    max = fmax(max, sum);
                }
                max = fmax(max, sum);
            //}
        }
        if(nums[i]>0){
            minus = true;
        }
    }
    if(numsSize == 1){
        max = nums[0];
    }
    if(minus == false){
        max = -10001;
        for(int i = 0; i < numsSize; i++){
            if(nums[i] > max){
                max = nums[i];
            }
        }
    }
    return max;
}
